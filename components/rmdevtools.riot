<rmdevtools>

    <a class="toggle open" onclick={ toggleOpen } title="Toggle state debugger">
        <i class="fa fa-eye-slash fa-fw" if={ state.isOpen }></i>
        <i class="fa fa-eye fa-fw" if={ !state.isOpen }></i>
    </a>

    <virtual if={ state.editing }>

        <virtual if={ !state.autoSave }>
            <a class="toggle save" onclick={ onSave } title="Save state">
                <i class="fa fa-save fa-fw" ></i>
            </a>
        </virtual>

        <a class="toggle mode" onclick={ viewMode } title="Cancel edit">
            <i class="fa fa-ban fa-fw"></i>
        </a>
        <a class="toggle autoSave" onclick={ toggleAutoSave } title="Toggle Auto Save">
            <i class="fa fa-{ state.autoSave ? 'mouse' : 'sync' } fa-fw" ></i>
        </a>

        <a
            class="toggle view"
            onclick={ toggleMode }
            title="{ state.asTree ? 'Text mode' : 'Tree mode' }"
        >
            <i class="fa fa-{ state.asTree ? 'code' : 'tree' } fa-fw" ></i>
        </a>

    </virtual>

    <a class="toggle mode" onclick={ treeMode } if={ !state.editing } title="Edit state">
        <i class="fa fa-edit fa-fw"></i>
    </a>

    <span id="savingCountdown"></span>

    <div id="container">
        <div id="tree"></div>
    </div>

    <script>

        // Ommitted because of build script
        /** import { connect, getStream } from 'riot-meiosis'; */

        const urls = {
            js: "https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.1.9/jsoneditor.min.js",
            css: "https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/9.1.9/jsoneditor.min.css",
            fontawesome: "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css"
        };

        const mkCss = (href) => {

            const link = document.createElement('link');
            link.setAttribute('href', href);
            link.setAttribute('rel', 'stylesheet');

            return link;
        };

        const debounce = function (func, wait, ref, rmdtState) {

            let timeout;
            let countdown;
            let countdownTimeout;

            const setInnerText = () => {

                if (!rmdtState().editing || !rmdtState().autoSave) {
                    ref.innerText = '';
                    return;
                }

                if (!countdown) {

                    ref.innerText = 'saved!';
                    return;
                };

                ref.innerText = `saving in ${countdown}`;
                countdown--;

                countdownTimeout = setTimeout(setInnerText, wait / 5);
            }

            return function () {


                if (ref) {

                    countdown = 5;
                    clearTimeout(countdownTimeout);
                    setInnerText();
                }

                const context = this, args = arguments;
                const later = function() {
                    timeout = null;
                    func.apply(context, args);
                };

                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        };


        const mapToState = (app, ownState) => ({ ...ownState, app });

        const component = {

            state: {
                isOpen: false,
                editing: false,
                asTree: true,
                autoSave: false,
                editorOpts: {
                    mode: 'view',
                    mainMenuBar: false
                }
            },

            loadScripts(cb) {

                const script = document.createElement('script');
                script.setAttribute('src', urls.js);

                const self = this;

                script.onload = () => cb();

                document.head.appendChild(mkCss(urls.css));
                document.head.appendChild(mkCss(urls.fontawesome));
                document.body.appendChild(script);
            },

            toggleOpen() {

                this.update({ isOpen: !this.state.isOpen });
            },

            toggleAutoSave() {

                this.update({ autoSave: !this.state.autoSave });
            },

            viewMode() {

                this.setMode('view', false);
            },

            toggleMode() {

                if (this.state.asTree) {
                    this.textMode()
                }
                else {
                    this.treeMode();
                }
            },

            textMode() {

                this.setMode('text', true, false);
            },

            treeMode() {

                this.setMode('tree', true);
            },

            setMode(mode, editing, asTree = true) {

                const { editorOpts } = this.state;
                editorOpts.mode = mode;
                this.update({ editing, editorOpts, asTree });
            },

            onSave() {

                const changes = this.editor.get();
                getStream().push(changes);
            },

            onChange() {

                if (this.state.autoSave) this.onSave()
            },

            onMounted(props, state) {

                this.root.classList.add('closed');

                window.addEventListener('keydown', ({ keyCode }) => {

                    if (keyCode === 27) {

                        this.update({ isOpen: false });
                    }
                });

                const debouncedOnChange = debounce(
                    this.onChange.bind(this),
                    (props.debounce || 3000) * 1,
                    this.$('#savingCountdown'),
                    () => this.state
                );

                this.loadScripts(() => {

                    this.ref = this.$('#tree');
                    this.editor = new JSONEditor(this.ref, {
                        ...state.editorOpts,
                        onChange: debouncedOnChange
                    });

                    this.editor.set(state.app);
                });
            },

            onUpdated(_, state) {

                if (this.state.isOpen) {
                    this.root.classList.remove('closed');
                }
                else {
                    this.root.classList.add('closed');
                }

                if (this.state.editing) {
                    this.$('#savingCountdown').style.display = '';
                }
                else {
                    this.$('#savingCountdown').style.display = 'none';
                }

                if (!this.editor) {
                    return;
                }

                this.editor.update(state.app);
                this.editor.setMode(state.editorOpts.mode);
            }
        };

        export default connect(mapToState)(component);
    </script>

    <style>
        :host {
            display: block;
            position: fixed;
            bottom: 0;
            top: 0;
            right: 0;
            width: 400px;
            height: 100vh;
            background: rgba(250,250,250, 0.95);
            box-shadow: 0px 0px 10px rgba(0,0,0,0.2);
            transition: all 250ms;
            z-index: 9999;
            opacity: 0.95;
        }

        :host table {

            margin: 0;
        }

        :host button {
            line-height: 1;
        }

        :host #container {
            height: 100vh;
            overflow: auto;
            padding: 5px;
            padding-bottom: 35px;
        }

        :host #tree {
            height: calc(100% - 60px);
        }

        :host .toggle {
            position: absolute;
            bottom: 2px;
            border-radius: 2px;
            padding: 5px;
            background: #fff;
            border: 1px solid #eee;
            font-size: 16px;
            color: #6c0;
            box-shadow: 0px 0px 3px rgba(0,0,0,0.1);
            transition: all 250ms;
        }

        :host .toggle:hover {
            color: #6a0;
            box-shadow: 0px 0px 6px rgba(0,0,0,0.2);
        }

        :host .toggle.open     { left: -35px; z-index: 11; }
        :host .toggle.mode     { right: 5px; z-index: 10; }
        :host .toggle.save     { right: 71px; z-index: 9; }
        :host .toggle.autoSave { right: 38px; z-index: 9; }
        :host .toggle.view     { left: 5px; z-index: 8; }

        :host #savingCountdown {

            bottom: 7px;
            left: 40px;
            padding: 4px;
            font-size: 12px;
            color: #ccc;
            position: absolute;
        }

        :host.closed {
            right: -400px;
            padding: 0;
            box-shadow: 0px 0px 0px rgba(0,0,0,0.2);
        }

        :host.closed h3 {
            font-size: 1rem;
            position: absolute;
            top: 0;
            right: 10px;
        }

        @media only screen and (max-width: 768px) {

            :host {
                width: 280px;
            }

            :host.closed {
                right: -280px;
            }

        }
    </style>

</rmdevtools>